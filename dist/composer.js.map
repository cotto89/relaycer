{"version":3,"sources":["../src/composer.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;IAIqB,Q;AACnB;;;;AAIA,sBAAyC;AAAA,qEAAJ,EAAI;;AAAA,QAA3B,KAA2B,QAA3B,KAA2B;AAAA,QAApB,WAAoB,QAApB,WAAoB;AAAA;;AACvC,SAAK,KAAL,GAAa,SAAS,KAAtB;AACA,SAAK,WAAL,GAAmB,eAAe,KAAlC;AACA,SAAK,MAAL,GAAc,EAAd;AACD;;AAED;;;;;;;;;;;0BAOM,Q,EAAU,K,EAAO;AACrB,UAAM,YAAY,MAAM,OAAN,CAAc,QAAd,IAA0B,QAA1B,GAAqC,CAAC,QAAD,CAAvD;;AADqB;AAAA;AAAA;;AAAA;AAGrB,wDAAiB,SAAjB,4GAA4B;AAAA,cAAjB,EAAiB;;AAC1B,cAAM,OAAO,mBAAS,EAAE,MAAM,UAAR,EAAoB,MAApB,EAAwB,KAAK,KAA7B,EAAT,CAAb;AACA,eAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACD;AANoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOrB,aAAO,IAAP;AACD;;AAED;;;;;;;;;;8BAOU,W,EAAa,K,EAAO;AAC5B,UAAM,OAAO,mBAAS,EAAE,MAAM,aAAR,EAAuB,IAAI,WAA3B,EAAwC,KAAK,KAA7C,EAAT,CAAb;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;4BAMQ,Q,EAAU;AAChB,UAAM,OAAO,mBAAS,EAAE,MAAM,SAAR,EAAmB,IAAI,QAAvB,EAAT,CAAb;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;2BAMO,S,EAAW;AAChB,UAAM,WAAW,KAAK,MAAL,CAAY,KAAZ,CAAkB,CAAC,CAAnB,EAAsB,CAAtB,CAAjB;AACA,UAAI,CAAC,uBAAQ,QAAR,CAAL,EAAwB,SAAS,MAAT,GAAkB,SAAlB;AACxB,aAAO,IAAP;AACD;;AAED;;;;;;;+BAIiC;AAAA,UAAxB,SAAwB,yDAAZ;AAAA,eAAM,IAAN;AAAA,OAAY;;AAC/B,qBAAe,qBAAW,QAAX,CAAoB,mBAApB,EAAyC,IAAzC,CAAf;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;;;gCAMY,Y,EAAc,I,EAAM;AAC9B;AACA,UAAI,YAAY,EAAhB;AACA;AACA,UAAI,YAAJ;AACA;AACA,UAAI,UAAU,KAAd;;AAEA,UAAI;AACF,oBAAY,KAAK,MAAL,CAAY,MAAZ,CAAmB,UAAC,MAAD,EAAS,IAAT,EAAkB;AAC/C,cAAI,OAAJ,EAAa,OAAO,sBAAc,MAAd,EAAsB,EAAtB,CAAP;;AAEb,cAAM,OAAO,KAAK,GAAL,CAAS,YAAT,EAAuB,MAAvB,CAAb;AACA,cAAI,SAAS,OAAb,EAAsB;AACpB,sBAAU,IAAV;AACA,mBAAO,sBAAc,MAAd,EAAsB,EAAtB,CAAP;AACD;;AAED,iBAAO,sBAAc,MAAd,EAAsB,IAAtB,CAAP;AACD,SAVW,EAUT,EAVS,CAAZ;AAWD,OAZD,CAYE,OAAO,CAAP,EAAU;AACV,cAAM,CAAN;AACD;;AAED,aAAO,KAAK,GAAL,EAAU,YAAV,EAAwB,SAAxB,CAAP;AACD;;;;;kBAzGkB,Q","file":"composer.js","sourcesContent":["import isEmpty from 'lodash/isEmpty';\nimport dispatcher from './dispatcher.js';\nimport Task from './task.js';\n\n/*\nTODO: async transaction\n*/\n\nexport default class Composer {\n  /**\n   * @param {boolean} {async}\n   * @param {boolean} {forceUpdate}\n   */\n  constructor({ async, forceUpdate } = {}) {\n    this.async = async || false;\n    this.forceUpdate = forceUpdate || false;\n    this._tasks = [];\n  }\n\n  /**\n   * Register task as modifier\n   *\n   * @param {Function|Function[]} modifier(s)\n   * @param {any} [value]\n   * @returns {Composer}\n   */\n  batch(modifier, value) {\n    const modifiers = Array.isArray(modifier) ? modifier : [modifier];\n\n    for (const fn of modifiers) {\n      const task = new Task({ type: 'modifier', fn, arg: value });\n      this._tasks.push(task);\n    }\n    return this;\n  }\n\n  /**\n   * Register task as transformer\n   *\n   * @param {Function} transformer\n   * @param {any} [value]\n   * @returns {Composer}\n   */\n  transfrom(transformer, value) {\n    const task = new Task({ type: 'transformer', fn: transformer, arg: value });\n    this._tasks.push(task);\n    return this;\n  }\n\n  /**\n   * Register task as breakder\n   *\n   * @param {Function} breakder\n   * @returns {Composer}\n   */\n  breakIf(breakder) {\n    const task = new Task({ type: 'breaker', fn: breakder });\n    this._tasks.push(task);\n    return this;\n  }\n\n  /**\n   * Register skipIf to prev task.\n   *\n   * @param {Function} validator\n   * @returns {Composer}\n   */\n  skipIf(validator) {\n    const lastTask = this._tasks.slice(-1)[0];\n    if (!isEmpty(lastTask)) lastTask.skipIf = validator;\n    return this;\n  }\n\n  /**\n   * @param {Function} [validator]\n   * @returns {Composer}\n   */\n  dispatch(validator = () => true) {\n    validator() && dispatcher.dispatch('composer:dispatch', this);\n    return this;\n  }\n\n  /**\n   * Execute transaction on Store\n   *\n   * @param {Object} currentState\n   * @param {Function} done\n   */\n  __compose__(currentState, done) {\n    /** @type {Object} */\n    let nextState = {};\n    /** @type {Error} */\n    let err;\n    /** @type {boolean} */\n    let _break_ = false;\n\n    try {\n      nextState = this._tasks.reduce((result, task) => {\n        if (_break_) return Object.assign(result, {});\n\n        const next = task.run(currentState, result);\n        if (next === 'BREAK') {\n          _break_ = true;\n          return Object.assign(result, {});\n        }\n\n        return Object.assign(result, next);\n      }, {});\n    } catch (e) {\n      err = e;\n    }\n\n    return done(err, currentState, nextState);\n  }\n\n}\n"]}